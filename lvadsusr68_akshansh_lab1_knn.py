# -*- coding: utf-8 -*-
"""LVADSUSR68_Akshansh_LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kzv0Ye9VArEi4kY9whxCciQv8STavKei
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score

wine_data = pd.read_csv('winequality-red.csv')

print("Data Overview:")
print(wine_data.head())
print("\nData Summary:")
print(wine_data.describe())

plt.figure(figsize=(12, 6))
sns.boxplot(data=wine_data.drop(columns=['quality']), orient='h')
plt.title('Boxplots of Physicochemical Properties')
plt.xlabel('Value')
plt.ylabel('Properties')
plt.show()

plt.figure(figsize=(10, 8))
corr_matrix = wine_data.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

sns.pairplot(wine_data, hue='quality', plot_kws={'alpha':0.5})
plt.suptitle('Pairplot of Physicochemical Properties by Quality')
plt.show()

plt.figure(figsize=(8, 6))
sns.countplot(x='quality', data=wine_data)
plt.title('Countplot of Wine Quality')
plt.xlabel('Quality')
plt.ylabel('Count')
plt.show()

wine_data.fillna(wine_data.mean(), inplace=True)


Q1 = wine_data.quantile(0.25)
Q3 = wine_data.quantile(0.75)
IQR = Q3 - Q1
wine_data = wine_data[~((wine_data < (Q1 - 1.5 * IQR)) | (wine_data > (Q3 + 1.5 * IQR))).any(axis=1)]

wine_data['quality'] = wine_data['quality'].apply(lambda x: 1 if x > 6 else 0)

label_encoder = LabelEncoder()
wine_data['quality'] = label_encoder.fit_transform(wine_data['quality'])


selected_features = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
                     'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
                     'pH', 'sulphates', 'alcohol']

X = wine_data[selected_features]
y = wine_data['quality']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# KNN Classifier
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

# Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Model Evaluation
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    return accuracy, precision, recall

knn_accuracy, knn_precision, knn_recall = evaluate_model(knn_model, X_test, y_test)
rf_accuracy, rf_precision, rf_recall = evaluate_model(rf_model, X_test, y_test)

print("\nk-nn model:")
print("accuracy:", knn_accuracy)
print("precision:", knn_precision)
print("recall:", knn_recall)

print("\nrandom forest model:")
print("accuracy:", rf_accuracy)
print("precision:", rf_precision)
print("recall:", rf_recall)